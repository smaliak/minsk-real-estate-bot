import os
import telebot
from telebot import types
import requests
import logging
import json
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –ò–∑–º–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7763479683:AAEiEsx4465ou4hQa6WjGTtHO0lIbDeYNr0"
ABACUS_DEPLOYMENT_ID = "dc537f08c"
ABACUS_API_URL = "https://api.abacus.ai/api/v0/deployment/predict"
ABACUS_TOKEN = "s2_eb0c25c11860486f8e807780c18941e1"

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_histories = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.debug(f"Received /start command from user {message.from_user.id}")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É...")
        logger.debug("Sent initial response")
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
        welcome_text = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–∏–Ω—Å–∫–µ.

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø–æ–∫—É–ø–∫–æ–π/–ø—Ä–æ–¥–∞–∂–µ–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–π–æ–Ω–∞—Ö
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""

        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = [
            "üí∞ –û—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
            "üè† –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
            "üîë –ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
            "üó∫ –†–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞",
            "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã",
            "‚ùì –ü–æ–º–æ—â—å"
        ]
        keyboard.add(*[types.KeyboardButton(text) for text in buttons])
        
        bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=keyboard
        )
        logger.debug("Sent welcome message with keyboard")
        
    except Exception as e:
        logger.error(f"Error in send_welcome: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    logger.debug(f"Received message: {message.text} from user {message.from_user.id}")
    try:
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        bot.reply_to(message, "–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        logger.debug("Sent confirmation message")
        
    except Exception as e:
        logger.error(f"Error in handle_text: {str(e)}", exc_info=True)
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
@app.route("/" + TELEGRAM_TOKEN, methods=['POST'])
def webhook():
    try:
        logger.debug("Webhook received request")
        logger.debug(f"Headers: {request.headers}")
        
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            logger.debug(f"Received webhook data: {json_string}")
            
            update = telebot.types.Update.de_json(json_string)
            logger.debug("Created Update object")
            
            bot.process_new_updates([update])
            logger.debug("Processed update")
            
            return ''
        else:
            logger.warning(f"Received request with wrong content-type: {request.headers.get('content-type')}")
            return 'Error: wrong content-type'
    
    except Exception as e:
        logger.error(f"Error in webhook handler: {str(e)}", exc_info=True)
        return 'Error in webhook handler'

@app.route("/")
def index():
    return "Bot is running"

if __name__ == "__main__":
    logger.info("Starting bot application")
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
