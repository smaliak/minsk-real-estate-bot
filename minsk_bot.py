import os
import telebot
from telebot import types
import requests
import logging
import json
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7763479683:AAEiEsx4465ou4hQa6WjGTtHO0lIbDeYNr0"
ABACUS_DEPLOYMENT_ID = "2f66f5efc"
ABACUS_API_URL = "https://app.abacus.ai/api/v0/deployment/predict"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL
ABACUS_TOKEN = "004a4ac2c18144cda4198ce9a964d26d"

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_histories = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False)

def get_ai_response(user_id, message_text):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Abacus AI"""
    try:
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if user_id not in user_histories:
            user_histories[user_id] = []
        
        headers = {
            "Authorization": f"Bearer {ABACUS_TOKEN}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        data = {
            "deployment_id": ABACUS_DEPLOYMENT_ID,
            "prediction_input": {
                "question": message_text,
                "chat_history": user_histories[user_id]
            }
        }
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: URL={ABACUS_API_URL}")
        logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(data)}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        urls_to_try = [
            "https://app.abacus.ai/api/v0/deployment/predict",
            "https://api.abacus.ai/api/v0/deployment/predict",
            "https://api.abacus.ai/deployment/predict"
        ]
        
        response = None
        working_url = None
        
        for url in urls_to_try:
            try:
                logger.debug(f"–ü—Ä–æ–±—É–µ–º URL: {url}")
                response = requests.post(url, headers=headers, json=data, timeout=10)
                if response.status_code == 200:
                    working_url = url
                    break
                else:
                    logger.warning(f"URL {url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ URL {url}: {str(e)}")
                continue
        
        if working_url:
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π URL: {working_url}")
            global ABACUS_API_URL
            ABACUS_API_URL = working_url
        
        if response and response.status_code == 200:
            result = response.json()
            answer = result["prediction"]["answer"]
            
            user_histories[user_id].append({"role": "user", "content": message_text})
            user_histories[user_id].append({"role": "assistant", "content": answer})
            
            if len(user_histories[user_id]) > 20:
                user_histories[user_id] = user_histories[user_id][-20:]
            
            logger.debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI")
            return answer
        else:
            status = response.status_code if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            text = response.text[:200] if response else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"
            logger.error(f"–û—à–∏–±–∫–∞ API: {status} - {text}")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}", exc_info=True)
        return None

def create_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        "üí∞ –û—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
        "üè† –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
        "üîë –ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É",
        "üó∫ –†–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞",
        "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã",
        "‚ùì –ü–æ–º–æ—â—å"
    ]
    keyboard.add(*[types.KeyboardButton(text) for text in buttons])
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    welcome_text = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–∏–Ω—Å–∫–µ.

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø–æ–∫—É–ø–∫–æ–π/–ø—Ä–æ–¥–∞–∂–µ–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–π–æ–Ω–∞—Ö
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚¨áÔ∏è"""
    
    try:
        bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=create_keyboard()
        )
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}", exc_info=True)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = get_ai_response(message.from_user.id, message.text)
        
        if ai_response:
            bot.reply_to(message, ai_response)
            logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç AI")
        else:
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            bot.reply_to(message, error_message)
            logger.warning("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–æ—Ç–≤–µ—Ç AI –Ω–µ –ø–æ–ª—É—á–µ–Ω)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@app.route("/" + TELEGRAM_TOKEN, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        logger.debug("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫")
        
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            logger.debug("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞")
            
            update = telebot.types.Update.de_json(json_string)
            logger.debug("–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Update")
            
            bot.process_new_updates([update])
            logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            
            return ''
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º content-type")
            return 'Error: wrong content-type'
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return 'Error in webhook handler'

@app.route("/")
def index():
    return "Bot is running"

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞")
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
